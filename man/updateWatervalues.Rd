% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/iterations_simulation_DP.R
\name{updateWatervalues}
\alias{updateWatervalues}
\title{Calculate water values with \code{Grid_Matrix} from estimated reward,
used in \code{calculateBellmanWithIterativeSimulations}}
\usage{
updateWatervalues(
  reward,
  controls,
  area,
  mcyears,
  simulation_res,
  opts,
  states_step_ratio,
  pump_eff,
  penalty_low,
  penalty_high,
  inflow,
  niveau_max,
  max_hydro_weekly,
  method_dp = "grid-mean",
  cvar_value = 0.5,
  force_final_level = F,
  final_level = NULL,
  penalty_final_level = NULL
)
}
\arguments{
\item{reward}{Data frame containing estimation of the reward function,
same format as the output of \code{reward_offset}, not yet offseted with respect to 0}

\item{controls}{Data frame containing possible transition for each week,
generated by the function \code{constraint_generator}}

\item{area}{Area with the reservoir}

\item{mcyears}{Vector of monte carlo years used to evaluate rewards}

\item{simulation_res}{Generated by the function \code{runWaterValuesSimulation}}

\item{opts}{List of simulation parameters returned by the function
\code{antaresRead::setSimulationPath}}

\item{states_step_ratio}{Discretization ratio to generate steps levels
between the reservoir capacity and zero}

\item{pump_eff}{Pumping efficiency between 0 and 1 (1 if no pumping)}

\item{penalty_low}{Penalty for violating the bottom rule curve}

\item{penalty_high}{Penalty for violating the top rule curve}

\item{inflow}{Data frame with inflows for each week and each scenario,
generated by the function \code{antaresRead::readInputTS}}

\item{niveau_max}{Capacity of the reservoir in MWh}

\item{max_hydro_weekly}{data.frame \code{timeId,pump,turb} with maximum pumping and storing
powers for each week,returned by the function  \code{get_max_hydro}}

\item{method_dp}{Algorithm in dynamic programming part}

\item{cvar_value}{from 0 to 1. the probability used in quantile method
to determine a bellman value which cvar_value all bellman values are equal or
less to it. (quantile(cvar_value))}

\item{force_final_level}{Binary. Whether final level should be constrained}

\item{final_level}{Final level (in percent between 0 and 100) if final level is constrained but different from initial level}

\item{penalty_final_level}{Penalties (for both bottom and top rule curves) to constrain final level}
}
\value{
List containing aggregated water values and the data table with all years
}
\description{
Calculate water values with \code{Grid_Matrix} from estimated reward,
used in \code{calculateBellmanWithIterativeSimulations}
}
